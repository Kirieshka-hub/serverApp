import socket
import threading
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QLabel, QDialog, QPushButton, QVBoxLayout, QHBoxLayout, QGridLayout
from PyQt5 import QtCore, QtWidgets
import sys
from initUI import Ui_MainWindow


class EmojiDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞")
        self.setGeometry(500, 500, 300, 300)

        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–æ–≤
        emojis = [
            "üòä", "üòÇ", "üòç", "üòé", "üò¢", "üò°", "üò±", "ü•≥", "ü§î", "ü§ó",
            "üôÑ", "üò¥", "üò∑", "ü§í", "ü§ï", "üôÉ", "üòâ", "üòã", "ü§™", "ü§©",
            "üëç", "üëé", "üëè", "üôè", "üëå", "ü§ò", "‚úåÔ∏è", "üëã", "ü§ù", "üí™",
            "‚ù§Ô∏è", "üíî", "üíô", "üíú", "üí•", "üí´", "üî•", "‚≠ê", "üåô", "‚òÄÔ∏è",
            "üéâ", "üéä", "üéÅ", "üéà", "üéÇ", "üçï", "üçî", "üçü", "üç©", "üç™"
        ]

        layout = QGridLayout()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç–∫—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–æ–≤

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞
        for i, emoji in enumerate(emojis):
            button = QPushButton(emoji)
            button.setFixedSize(40, 40)
            button.clicked.connect(lambda _, e=emoji: self.send_emoji(e))
            layout.addWidget(button, i // 10, i % 10)  # —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ 10 —Å–º–∞–π–ª–∏–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ

        self.setLayout(layout)
        self.selected_emoji = None

    def send_emoji(self, emoji):
        # –í—ã–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª–∏–∫ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        self.selected_emoji = emoji
        self.accept()


class AwaitingWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
        self.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
        self.setGeometry(1400, 850, 300, 100)
        self.label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...", self)
        self.label.setGeometry(50, 20, 200, 50)


class MainWindow(QMainWindow):
    def __init__(self, awaiting_window):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ª–æ–≥–∏–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.ui.pushButton.clicked.connect(self.login)
        self.ui.pushButton_3.clicked.connect(self.register)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.ui.pushButton_7.clicked.connect(self.clear_text_edit)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–æ–≤
        self.ui.pushButton_6.clicked.connect(self.open_emoji_dialog)

        self.client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        self.awaiting_window = awaiting_window

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.ui.pushButton_5.clicked.connect(self.send_message)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
        self.ui.listWidget.itemClicked.connect(self.client_selected)

        self.selected_client_ip_port = None

    def connect_to_server(self):
        udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        udp_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        udp_sock.bind(('', 37021))

        print('Looking for the server...')

        data, addr = udp_sock.recvfrom(1024)
        message = data.decode('utf-8')
        if message.startswith('SERVER_IP:'):
            server_ip = message.split(':')[1]
            print(f'Server IP found: {server_ip}')

            try:
                self.client_sock.connect((server_ip, 53210))
                print('Connected to server')

                self.awaiting_window.close()
                self.show()

                threading.Thread(target=self.receive_moves, daemon=True).start()

            except Exception as e:
                print(f"Failed to connect: {e}")

    def receive_moves(self):
        while True:
            try:
                message = self.client_sock.recv(1024).decode('utf-8')
                if message:
                    if message.startswith("REGISTER_SUCCESS"):
                        self.ui.go_to_third_page()
                        self.client_sock.sendall("GET_CLIENT_LIST".encode('utf-8'))
                    elif message.startswith("REGISTER_FAIL"):
                        error_msg = message.split(":", 1)[1] if ":" in message else "Registration failed"
                        QtWidgets.QMessageBox.warning(self, '–û—à–∏–±–∫–∞', error_msg)
                    elif message.startswith("LOGIN_SUCCESS"):
                        self.ui.go_to_third_page()
                        self.client_sock.sendall("GET_CLIENT_LIST".encode('utf-8'))
                    elif message.startswith("LOGIN_FAIL"):
                        error_msg = message.split(":", 1)[1] if ":" in message else "Login failed"
                        QtWidgets.QMessageBox.warning(self, '–û—à–∏–±–∫–∞', error_msg)
                    elif message.startswith("CLIENT_LIST:"):
                        clients_info = message.split(":", 1)[1]
                        clients = clients_info.split(",")
                        self.ui.listWidget.clear()
                        for client in clients:
                            self.ui.listWidget.addItem(client)
                    else:
                        self.ui.textEdit.append(f'{message}')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                break

    def client_selected(self, item):
        self.selected_client_ip_port = item.text()
        print(f"–í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç: {self.selected_client_ip_port}")

    def send_message(self):
        message = self.ui.lineEdit_6.text()
        if message and self.selected_client_ip_port:
            try:
                final_message = f"TO:{self.selected_client_ip_port}:{message}"
                self.client_sock.sendall(final_message.encode('utf-8'))
                self.ui.textEdit.append(f"–í—ã (–∫–ª–∏–µ–Ω—Ç—É {self.selected_client_ip_port}): {message}")
                self.ui.lineEdit_6.clear()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def open_emoji_dialog(self):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–æ–≤
        dialog = EmojiDialog(self)
        if dialog.exec_():
            selected_emoji = dialog.selected_emoji
            if selected_emoji and self.selected_client_ip_port:
                try:
                    final_message = f"TO:{self.selected_client_ip_port}:{selected_emoji}"
                    self.client_sock.sendall(final_message.encode('utf-8'))
                    self.ui.textEdit.append(f"–í—ã (–∫–ª–∏–µ–Ω—Ç—É {self.selected_client_ip_port}): {selected_emoji}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–º–∞–π–ª–∏–∫–∞: {e}")

    def login(self):
        username = self.ui.lineEdit.text()
        password = self.ui.lineEdit_2.text()

        login_message = f"LOGIN:{username}:{password}"
        try:
            self.client_sock.sendall(login_message.encode('utf-8'))
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞: {e}')
            return

    def register(self):
        username = self.ui.lineEdit_3.text()
        password = self.ui.lineEdit_4.text()
        confirm_password = self.ui.lineEdit_5.text()

        if password != confirm_password:
            QtWidgets.QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.')
            return

        registration_message = f"REGISTER:{username}:{password}"
        try:
            self.client_sock.sendall(registration_message.encode('utf-8'))
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}')
            return

    def clear_text_edit(self):
        # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.ui.textEdit.clear()
        print("–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ")


if __name__ == "__main__":
    app = QApplication(sys.argv)

    awaiting_window = AwaitingWindow()
    awaiting_window.show()

    client_window = MainWindow(awaiting_window)
    client_window.connect_to_server()

    sys.exit(app.exec_())
